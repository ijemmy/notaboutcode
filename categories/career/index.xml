<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Career on Not About Code - Technical Leadership</title><link>https://www.notaboutcode.com/categories/career/</link><description>Recent content in Career on Not About Code - Technical Leadership</description><generator>Hugo -- gohugo.io</generator><language>th</language><lastBuildDate>Mon, 29 Aug 2022 15:05:28 +0100</lastBuildDate><atom:link href="https://www.notaboutcode.com/categories/career/index.xml" rel="self" type="application/rss+xml"/><item><title>เป็นลูกรักของหัวหน้าอย่างไรให้สมศักดิ์ศรี (ฉบับโปรแกรมเมอร์)</title><link>https://www.notaboutcode.com/post/42-being-lovable-boss-favorite/</link><pubDate>Mon, 29 Aug 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/42-being-lovable-boss-favorite/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/yelling-01.png" alt="Photo by Sebastian Herrmann on Unsplash">&lt;/p>
&lt;p>ตอนผมเริ่มทำงานครั้งแรก พี่ในทีมชอบแซวผมว่าผมเป็นลูกรักของหัวหน้า (Boss’s Favorite)&lt;/p>
&lt;p>ฟังครั้งแรกก็ตกใจ เพราะการเป็นลูกรักมักจะมาพร้อมกับภาพของการประจบสอพลอ&lt;/p>
&lt;p>แต่ผมมั่นใจว่าไม่ได้ประจบแน่ๆ เพราะแกเป็นต่างประเทศ ตอนนั้นผมพูดภาษาอังกฤษไม่ค่อยได้&lt;/p>
&lt;p>แค่เรื่องงาน บางทีก็ต้องให้แกเขียนสรุปเป็นอีเมลล์ให้ เพราะฟังสำเนียงเท็กซัสของแกไม่รู้เรื่อง&lt;/p>
&lt;p>เวลาผ่านไป ผมผ่านหัวหน้าสิบกว่าคน ได้เป็นทั้งลูกรัก ลูกชัง และลูกธรรมดาๆ ผมค้นพบสามเรื่องที่เหมือนกันสำหรับหัวหน้าทุกคน&lt;/p></description></item><item><title>ทำงานให้เร็วขึ้น ในเวลาที่น้อยลง (ในบริบทของโปรแกรมเมอร์)</title><link>https://www.notaboutcode.com/post/40-more-work-with-less-time/</link><pubDate>Thu, 30 Jun 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/40-more-work-with-less-time/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/tangled-01.png" alt="Photo by Sebastian Herrmann on Unsplash">&lt;/p>
&lt;p>ผมเป็นคนบ้างานในระดับนึงเลย&lt;/p>
&lt;p>จะเรียกว่าบ้างานก็ไม่ถูกซะทีเดียว เพราะผมค่อนข้างจะสนุกกับงานเขียนโปรแกรม บางทีก็ไม่ได้รู้สึกว่าตัวเองทำงานอยู่&lt;/p>
&lt;p>พอถึงหกโมงเย็น ถ้ายังแก้บั้คไม่เสร็จ ก็ยังจะอยากดีบั๊กต่อ ถ้าทำฟีเจอร์เสร็จ ก็อยากจะทำฟีเจอร์ถัดไป ไม่ก็นั่งรีแฟคเตอร์ต่อ&lt;/p>
&lt;p>สมัยมีชีวิตโสด ออกจากงานประมาณ 2-3 ทุ่ม เป็นอย่างเร็ว&lt;/p>
&lt;p>สองปีก่อนแต่งงาน ชีวิตเปลี่ยนครับ&lt;/p>
&lt;p>แฟนยื่นข้อเสนอที่ปฏิเสธไม่ได้ก่อนแต่งงาน คือเราสองคนต้องกลับมากินข้าวเย็นด้วยกันที่บ้านก่อนทุ่มนึง&lt;/p>
&lt;p>ดังนั้น ประมาณ 5.30 ของทุกวัน ผมก็จะเตรียมแพ็คของกลับบ้าน&lt;/p>
&lt;p>หลังจากทำได้สักสองสัปดาห์ ยามในออฟฟิซก็เริ่มทัก ว่ายูหายไปไหนตอนกลางคืน (ยามกะดึกจะเจอผมทุกวัน)&lt;/p></description></item><item><title>จากหลักล้านสู่หลักหน่วย ด้วยความรู้ด้าน Data structure (ตอน 1)</title><link>https://www.notaboutcode.com/post/39-bloem-filter-01/</link><pubDate>Wed, 29 Jun 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/39-bloem-filter-01/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/surprised-kid-01.png" alt="Photo by Xavi Cabrera on Unsplash">&lt;/p>
&lt;p>ถ้าใครเคยสัมภาษณ์งานตำแหน่ง Software Engineer ในองค์กรเทคระดับโลก (เช่น Google, Amazon, Facebook, Apple, Netflix) จะรู้ว่าทุกบริษัทจะเช็คความรู้ด้าน Data structure หมด&lt;/p>
&lt;p>สาเหตุเพราะนี่ความรู้ที่สำคัญมากในการทำงานเสกลใหญ่ๆ ที่มีจำนวนข้อมูล หรือผุ้ใช้หลักล้านขึ้นไป&lt;/p>
&lt;p>สำคัญมากนี่คือแค่ไหน?&lt;/p>
&lt;p>ในบทความนี้ ผมจะยกตัวอย่างโจทย์ง่ายๆ ที่เกิดขึ้นในเว็บบราวเซอร์ที่เราใช้ทุกวัน และแสดงให้เห็นว่า โปรแกรมสามารถทำงานเร็วต่างกัน ชนิดราวฟ้ากับเหว (จากคำนวนล้านครั้งเหลือแค่ไม่ถึงสิบครั้ง) ถ้าคนเขียนรู้จักใช้ Data structure ที่เหมาะสม&lt;/p></description></item><item><title>เมื่อต้องขยับไปเป็นเทคลีด (From an engineer to a technical lead)</title><link>https://www.notaboutcode.com/post/38-promote-to-tech-lead/</link><pubDate>Fri, 27 May 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/38-promote-to-tech-lead/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/meeting-01.png" alt="Photo by Sebastian Herrmann on Unsplash">&lt;/p>
&lt;p>พอถึงจุดนึงในชีวิต หัวหน้าจะเลื่อนขั้นคุณ แต่อย่าด่วนดีใจไป เพราะการเลื่อนขั้นมักจะมาพร้อมกับภาระหน้าที่ที่เพิ่มขึ้น (ส่วนจะขึ้นเงินเดือนให้รึเปล่านี่อีกเรื่องนึง)&lt;/p>
&lt;p>สำหรับคนที่ไม่ได้อยากทำสาย People Management (เช่น ไปเป็น Engineering manager) ส่วนใหญ่ก็มักจะได้รับการเลื่อนตำแหน่งให้เป็น Technical lead (หรือบางที่ก็เรียกว่า Project lead) ที่คอยดูแลภาพรวมของโปรเจ็คหรือโปรดักต์ และคอยกระจายงานให้กับคนในทีม&lt;/p>
&lt;p>จากประสบการณ์ส่วนตัว การขยับไปเทคลีดมักจะไม่ได้มีการเตรียมพร้อมกันให้ดี ส่วนใหญ่มักจะเกิดขึ้นเพราะมีเทคลีดคนเก่าออก หรือไม่ก็ค้นพบว่าทิศทางมันมั่วมาก ควรจะมีใครสักคนคอยดูแลเรื่องนี้&lt;/p>
&lt;p>ถ้าเทียบกับตอนเริ่มทำงานใหม่ๆ อย่างน้อยคุณก็จะมีเมนเตอร์หรือพี่เลี้ยงในทีมคอยช่วย แต่พอเลื่อนทำแหน่งเป็นเทคลีด หัวหน้ามักจะคิดว่าคุณทำได้ทันทีโดยไม่ต้องมีพี่เลี้ยงหรือชั่วโมงทดลองบิน ซึ่งก็มักจะนำมาซึ่งความฉิบหายในโปรเจ็คแรกๆ ก่อนที่จะเข้าที่เข้าทาง (อันนี้ผมเองเลย)&lt;/p>
&lt;p>บทความนี้เสนอข้อแนะนำ 3 ข้อ สำหรับเทคลีดมือใหม่ครับ&lt;/p></description></item><item><title>วิ่งไล่ตามเทคโนโลยีไม่ทัน ทำยังไงดี</title><link>https://www.notaboutcode.com/post/24-catching-up-with-tech/</link><pubDate>Sat, 16 Jun 2018 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/24-catching-up-with-tech/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/run-01.jpg" alt="Photo by Andy Beales on Unsplash">&lt;/p>
&lt;p>พอโปรแกรมเมอร์มีประสบการณ์มากขึ้น ก็จะค้นพบว่าตัวเองมีสิ่งที่ยังไม่รู้มากขึ้น&lt;/p>
&lt;p>ผมคิดว่าหลายๆคนก็คงคล้ายผม คือจะอยากอ่าน อยากรู้ และอยากลองไปซะทุกอย่าง&lt;/p>
&lt;p>ในอดีต อาจจะทำแบบนี้ได้ เพราะเทคโนโลยีแต่ก่อนไม่ได้เติบโตเร็วแบบทุกวันนี้&lt;/p>
&lt;p>ผมเองเป็นคนนึงที่พยายามตามเทคโนโลยีให้ได้มากที่สุด แต่พอถึงจุดนึงก็ต้องยอมรับ ว่าปัจจุบันเทคโนโลยีที่วิ่งเร็วกว่าเรามาก&lt;/p>
&lt;p>ถ้าตามแบบไม่มีหลักอะไรเลย ตามยังไงก็ไม่ไหว&lt;/p></description></item><item><title>โปรแกรมเมอร์มือใหม่ เรียนรู้อะไรดี (ภาค 2)</title><link>https://www.notaboutcode.com/post/07-career-start-non-technical/</link><pubDate>Tue, 31 Oct 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/07-career-start-non-technical/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/career-02.jpg" alt="Photo by Olu Eletu, from Unsplash.com">&lt;/p>
&lt;p>ใน&lt;a href="https://www.notaboutcode.com/post/06-career-start/">ภาคแรก&lt;/a>เราคุยกันในเรื่องของ Technical Skills ทีเป็นพื้นฐานไว้ใช้ในระยะยาว&lt;/p>
&lt;p>สำหรับภาคนี้ เราจะมาโฟกัสในส่วนของ Non-technical กันบ้าง ซึ่งเป็นครอบคลุมค่อนข้างหลากหลายเรื่อง โดยผมคัดเฉพาะหัวข้อที่ผมคิดว่าสำคัญๆ เพื่อไม่ให้ยาวเกินไป&lt;/p>
&lt;p>บทความนี้มีความคิดเห็นส่วนตัวเยอะมาก ผมเลยแยกออกมาจากภาคแรก&lt;/p>
&lt;p>ใครที่มีความเห็นแตกต่าง หรืออ่านแล้วรู้สึกจี้ด ไม่เห็นด้วยมากๆ ลองมาแลกเปลี่ยนความเห็นกันใน&lt;a href="https://www.facebook.com/notaboutcode/">เฟสบุ้คเพจ&lt;/a>ได้ครับ เผื่อบทความนี้อาจจะมีภาค3 ผมเองก็อยากเก็บรายละเอียด ให้ได้มากที่สุด เพราะบล็อคนี้ตั้งใจจะเขียนทิ้งไว้นาน&lt;/p>
&lt;p>สำหรับโปรแกรมเมอร์มือใหม่ที่ยังไม่มีความคิดเห็น อ่านแล้วก็ฟังหูไว้หู ใช้เป็นแนวทางแต่อย่ายึดมั่นกับมันมาก ยังมีคนที่เก่งกว่าผมอีกมากที่ใช้แนวทางอื่นในการพัฒนาตนเอง&lt;/p></description></item><item><title>โปรแกรมเมอร์มือใหม่ เรียนรู้อะไรดี ภาค 1</title><link>https://www.notaboutcode.com/post/06-career-start/</link><pubDate>Thu, 19 Oct 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/06-career-start/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/career-01.jpg" alt="Photo by Jake Hills, from Unsplash.com">&lt;/p>
&lt;p>ความยากลำบากของโปรแกรมเมอร์สมัยนี้คือมีเรื่องที่ต้องเรียนรู้เยอะมาก&amp;hellip;&lt;/p>
&lt;p>มากจนไม่รู้ว่าจะเริ่มต้นที่ไหนดี&lt;/p>
&lt;p>บทความนี้รวมสิ่งที่ผมคิดว่าสำหรับโปรแกรมเมอร์มือใหม่ ควรจะเรียนรู้เอาไว้ ไม่ว่าจะเป็นสาย Frontend, Backend, หรือ Fullstack เรื่องพวกนี้ได้ใช้แน่ๆ และได้ใช้นานด้วย&lt;/p>
&lt;p>ผมเชื่อว่าความรู้พวกนี้ ในอีก 20 ปีข้างหน้า โปรแกรมเมอร์ยุคนั้นก็ยังต้องรู้กัน (ถ้าไม่โดน AI แย่งงานไปก่อน)&lt;/p>
&lt;p>แทนที่จะเอาเวลาไปเรียนรู้พวกเฟรมเวิร์ค ภาษา หรือไลบรารี่ที่เปลี่ยนใหม่ทุกๆ 3-5 ปี เรียนรู้พวกนี้ดีกว่าครับ เรียนรอบเดียว ใช้ยาว&lt;/p>
&lt;p>มาดูกันครับว่ามีอะไรบ้าง&lt;/p></description></item></channel></rss>