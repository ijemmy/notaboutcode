<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Design on Not About Code - Technical Leadership</title><link>https://www.notaboutcode.com/categories/system-design/</link><description>Recent content in System Design on Not About Code - Technical Leadership</description><generator>Hugo -- gohugo.io</generator><language>th</language><lastBuildDate>Sat, 19 Feb 2022 12:04:02 +0700</lastBuildDate><atom:link href="https://www.notaboutcode.com/categories/system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>จะสเกลระบบหลักล้านด้วย Cache ต้องพิจารณาอะไรบ้าง</title><link>https://www.notaboutcode.com/post/31-caching/</link><pubDate>Sat, 19 Feb 2022 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/31-caching/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/desk-01.png" alt="Photo by Wonderlane(@wonderlane) on Unsplash">&lt;/p>
&lt;p>แคช(Cache)เป็นหนึ่งในตัวเลือกที่ถูกใช้บ่อยมากในการสเกลระบบให้สามารถรับโหลดได้เยอะๆ ถ้าใครไปสัมภาษณ์งานแล้วเจอคำถามว่าระบบมีคนใช้หลักล้าน และเป็นการอ่านข้อมูลเป็นหลัก (Read-intensive) ตอบได้เลยว่าใช้แคช แต่รายละเอียดของคำตอบว่าจะใช้ยังไง ต้องพิจารณาเรื่องไหนบ้าง เราจะมาคุยกันในบทความนี้ครับ&lt;/p>
&lt;p>ชี้แจงก่อนว่า เราจะคุยกันในมุมของการออกแบบระบบ (System Design) ซึ่งจะเป็นการใช้แคชในระดับของ Backend services เพราะแนวคิดของแคชนั้นถูกใช้ในทุกระดับ ยกตัวอย่างเช่น&lt;/p></description></item><item><title>การออกแบบระบบให้รับ Request เยอะๆ</title><link>https://www.notaboutcode.com/post/22-design-to-scale/</link><pubDate>Sun, 29 Apr 2018 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/22-design-to-scale/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/scale-01.jpg" alt="Photo by Immo Wegmann on Unsplash">&lt;/p>
&lt;p>เมื่อเดือนที่แล้ว มีโอกาสกลับไปเป็น Guest Speaker ที่ภาค ในวิชา System Analysis and Design&lt;/p>
&lt;p>อาจารย์ให้อิสระในเรื่องของหัวข้อ เลยตัดสินใจว่าอยากเล่าเรื่องที่มันสนุกๆ เผื่อน้องๆจะสนใจสาย Technical กันมากขึ้น หลังจากคิดอยู่หลายวัน ก็มาจบลงที่เรื่องนี้&lt;/p>
&lt;p>ด้วยเวลาที่จำกัด รู้สึกว่าถ่ายทอดเนื้อหาได้ไม่ครบเท่าที่ควร เลยเอาเนื้อหามาเขียนเป็นบทความซะเลย จะได้ไม่ค้างคาใจ&lt;/p>
&lt;p>เราจะเริ่มตั้งแต่การรับ Requirement การกะปริมาณ Load ของระบบ ไล่ไปจนถึงเทคนิคเบื้องที่ใช้ในการออกแบบให้รับ Request ได้เยอะขึ้น และสามารถโตตามปริมาณคนใช้ในอนาคตได้&lt;/p></description></item><item><title>บริษัทสุธีการจำ, CAP Theorem, และ Eventual Consistency</title><link>https://www.notaboutcode.com/post/17-cap-theorem/</link><pubDate>Sun, 07 Jan 2018 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/17-cap-theorem/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/photo-01.jpg" alt="Photo by Joanna Kosinska on Unsplash">&lt;/p>
&lt;p>หัวข้อด้าน Distributed System เป็นอะไรที่สนุก แต่เข้าใจยากมาก&lt;/p>
&lt;p>หนึ่งในเรื่องที่ผมอ่านหลายรอบกว่าจะเก็ต ก็คือเรื่องของ CAP Theorem ซึ่งเป็นแนวคิดในการ Trade-off คุณสมบัติของ Distributed System ที่เราออกแบบ&lt;/p>
&lt;p>&amp;ldquo;CAP&amp;rdquo; เป็นตัวย่อจาก Consistency, Availability, Partition Tolerant โดย Theorem นี้ได้กล่าวไว้ว่า คุณไม่มีทางที่่จะออกแบบระบบโดยมีคุณสมบัติ 3 ข้อนี้ พร้อมกัน อย่างเก่งก็ได้แค่ 2 ใน 3&lt;/p>
&lt;p>แต่ทำไมถึงเป็นอย่างนั้นล่ะ?&lt;/p>
&lt;p>วันนี้เราจะมาทำความเข้าใจกับเจ้า Theorem นี้กัน ผ่านการเรื่องราวของบริษัท &amp;ldquo;สุธีการจำ&amp;rdquo; !!&lt;/p></description></item><item><title>การออกแบบ Service API ให้เป็น Idempotent</title><link>https://www.notaboutcode.com/post/16-idempotent/</link><pubDate>Tue, 26 Dec 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/16-idempotent/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/pay-01.jpg" alt="Photo by William Iven on Unsplash">&lt;/p>
&lt;p>ใครเคยเรียกใช้งานเซอร์วิซครั้งเดียว (เช่น การโอนเงิน สั่งซื้อของ ฯลฯ) แล้วเจอ Transaction ตัดซ้ำสองครั้งไหมครับ?&lt;/p>
&lt;p>ถ้าใช่ คุณเจอปัญหาเรื่อง Idempotent เข้าให้แล้วล่ะ&lt;/p>
&lt;p>เราเคยคุยกันในเรื่องของ&lt;a href="https://www.notaboutcode.com/post/05-retry/">Retry&lt;/a>ไปแล้ว ว่าอาจจะถล่มเซอร์วิซตัวเองได้ หากไม่จัดการให้ดี&lt;/p>
&lt;p>มานั่งตรึกตรองดูอีกที จริงๆแล้วผมลืมอีกคอนเซ็บหนึ่งที่สำคัญมากเวลาเราใช้ Retry นั่นก็คือเรื่อง Idempotent ซึ่งเป็นที่มาของ เคส Transaction เกิดขึ้นสองที&lt;/p>
&lt;p>บทความนี้จะเริ่มต้นจากต้นตอของปัญหานี้ก่อน เพื่ออธิบายให้เห็นภาพว่าเกิดอะไรขึ้น และเสนอวิธีการแก้ปัญหาในตอนท้ายครับ&lt;/p></description></item><item><title>การออกแบบ Service API ให้ Backward-Compatible</title><link>https://www.notaboutcode.com/post/15-service-api-versioning/</link><pubDate>Fri, 15 Dec 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/15-service-api-versioning/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/lego-01.jpg" alt="Photo by Iker Urteaga on Unsplash">&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;APIs, like diamonds, are forever&amp;rdquo; &amp;ndash; Xebia Essentials&lt;/p>
&lt;/blockquote>
&lt;p>เรานิยมเลือกใช้เพชรในแหวนแต่งงาน เพื่อแสดงความเป็นนิรันดร์&lt;/p>
&lt;p>เวลาออกแบบ Service API ผมแนะนำให้ใส่ความโรแมนติกนี้ลงไปหน่อย ลองคิดว่านี่แหละคือแหวนแต่งงาน ระหว่างคุณและผู้ใช้เซอร์วิซของคุณ ที่จะอยู่ต่อไปตลอดจนชั่วเซอร์วิซสลาย&lt;/p></description></item><item><title>ปกป้องระบบไม่ให้ล่มหมดด้วย Bulkhead</title><link>https://www.notaboutcode.com/post/11-bulkhead/</link><pubDate>Sun, 12 Nov 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/11-bulkhead/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/ship-01.jpg" alt="Photo by Abraham Wiebe, from Unsplash.com">&lt;/p>
&lt;p>Bulkhead เป็นเทคนิคการออกแบบที่เหมาะกับ Critical System คือ ถ้าล่มปุ๊บ คนในองค์กรจะไม่สามารถทำงานต่อได้เลย&lt;/p>
&lt;p>ถ้าใครเปิดดิกดู ศัพท์นี้จริงๆใช้เรียกการออกแบบพาหนะครับ&lt;/p>
&lt;blockquote>
&lt;p>Bulkhead (n.) a dividing wall or barrier between separate compartments inside a ship, aircraft, or other vehicle.&lt;/p>
&lt;/blockquote>
&lt;p>ไอเดียของ Bulkhead คือการออกแบบให้พาหนะแยกออกเป็นส่วนๆ (Compartmentalisation) หากมีส่วนใดส่วนหนึ่งมีปัญหา ผลกระทบจะต้องไม่รุนแรงจนทำให้ทั้งพาหนะล่มหมด&lt;/p>
&lt;p>ยกตัวอย่างเช่น สมมติว่าเรือของเรามีจุดรั่วจุดหนึ่ง หากเราไม่ได้มีการแบ่งโซนเป็นส่วน น้ำจะกระจายไปทั่วท้องเรือ เรือก็จะจมแน่นอน&lt;/p>
&lt;p>การใช้ Bulkhead คือการกั้นส่วนท้องเรือออกเป็นส่วนๆ หากน้ำรั่วขึ้นมา น้ำก็จะเข้ามาจนเต็มแค่ส่วนหนึ่งๆ โดยไม่หนักพอทำให้เรือล่มทั้งลำ (ถ้ายังนึกภาพไม่ออก ลองดู&lt;a href="https://www.google.nl/search?dcr=0&amp;amp;biw=1832&amp;amp;bih=989&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=bulkhead&amp;amp;oq=bulkhead">ภาพในกูเกิ้ล&lt;/a>ครับ)&lt;/p></description></item><item><title>ปกป้องเซอร์วิซจากผู้ใช้มักมากด้วย Throttling</title><link>https://www.notaboutcode.com/post/10-throttle/</link><pubDate>Thu, 09 Nov 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/10-throttle/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/limit-01.jpg" alt="Photo by Ksenia Kudelkina, from Unsplash.com">&lt;/p>
&lt;p>ลองนึกภาพว่าเรามีระบบที่ถูกออกแบบเป็น Service-Oriented Architecture (SOA)&lt;/p>
&lt;p>ในบรรดาเซอร์วิซทั้งหมด จะมีบางเซอร์วิซทีเป็น Dependency ของเซอร์วิซอื่นๆ ผมจะเรียกเซอร์วิซนี้ว่าเซอร์วิซ A&lt;/p>
&lt;p>ถ้าเซอร์วิซ A พังขึ้นมา เซอร์วิซอื่นที่ต้องเรียกใช้ข้อมูลนี้ทั้งหมดก็จะทำงานไม่ได้&lt;/p>
&lt;p>ตัวอย่างเช่นในภาพข้างล่าง หากเซอร์วิซ A พัง เซอร์วิซ B, และ C จะทำงานไม่ได้&lt;/p></description></item><item><title>ปัญหาของ Sticky Session</title><link>https://www.notaboutcode.com/post/08-sticky-session/</link><pubDate>Thu, 02 Nov 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/08-sticky-session/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/traffic-01.jpg" alt="Photo by Denys Nevozhai, from Unsplash.com">&lt;/p>
&lt;p>ใครที่เคยใช้ Load Balancer (LB) คงจะเคยได้ยินคำว่า Sticky Session (หรือ Session Affinity) กันมาบ้าง&lt;/p>
&lt;p>แนวคิดของ Sticky Session คือการให้ LB ส่ง Request ที่มาจากผู้ใช้ (Client) คนเดียวยัง ไปยังเซอร์เวอร์ตัวเดียวกันตลอด&lt;/p>
&lt;p>ตัวอย่างเช่น เรามีเซอร์เวอร์ 3 ตัว ชื่อว่า S1, S2, และ S3 วางอยู่ข้างหลัง LB แล้วมีผู้ใช้ส่ง Request เข้ามายังเว็บเรา&lt;/p>
&lt;figure class="center" >
&lt;img src="https://www.notaboutcode.com/img/diagrams/loadbalancer.png"
alt="Load Balancer with 3 servers"
>
&lt;figcaption>
Load Balancer with 3 servers
&lt;/figcaption>
&lt;/figure>
&lt;p>ในครั้งแรก Request ถูกส่งไปให้ S1 แต่พอผู้ใช้ส่ง Request ถัดๆไป LB อาจส่ง Request นั้นไปยัง S2 หรือ S3 แทน&lt;/p>
&lt;p>แต่หากเราเปิด Sticky Session แล้วล่ะก็ ตัว LB จะส่ง Request จากผู้ใช้คนเดิมไปยัง S1 ตลอด โดยไม่ส่งไปที่ S2 หรือ S3 เลย&lt;/p>
&lt;p>ในบทความนี้ เราจะมาทำความเข้าใจว่า Sticky Session ให้ละเอียดยิ่งขึ้น และอธิบายถึงปัญหาที่มักจะเกิดขึ้นในการใช้ Sticky Session&lt;/p></description></item><item><title>Retry ยังไงให้ปลอดภัย</title><link>https://www.notaboutcode.com/post/05-retry/</link><pubDate>Sat, 14 Oct 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/05-retry/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/spiral-stairs-01.jpg" alt="Photo by Nick Morris, from Unsplash.com">&lt;/p>
&lt;p>วันนี้นั่งคุยกับเพื่อนเรื่อง Retry รู้สึกว่าเป็นหัวข้อที่น่าสนใจดี&lt;/p>
&lt;p>โจทย์คือเรามี External service ที่ไม่ค่อยสเถียรเท่าไร เวลาส่ง Request ไป วันดีคืนดีก็อาจจะ:&lt;/p>
&lt;ol>
&lt;li>พังแบบส่งสาเหตุการพังกลับมาให้ เช่น 5xx พร้อม error code&lt;/li>
&lt;li>พังแบบไม่มีอะไรตอบกลับมา ซึ่งสาเหตุอาจจะมาจากที่ระบบนั้นเดี้ยงไประหว่างการทำงาน หรือเน็ตเวิร์คเน่า&lt;/li>
&lt;/ol>
&lt;p>กรณีนี้ เรามีหลายทางเลือก&lt;/p>
&lt;ol>
&lt;li>
&lt;p>เลือกที่จะจบการทำงาน แล้วแสดงผลให้ฝั่งผู้ใช้ของเรา (Client) รู้ว่าระบบมีปัญหา พร้อม Error code ซึ่งก็ถือว่ายอมรับได้ เพราะหากเราจำเป็นต้องการใช้ข้อมูลจาก External Service ยังไงก็ทำอะไรไม่ได้&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ทำการ Retry คือการส่ง Request ซ้ำโดยอัตโนมัติ หากเกิดข้อผิดพลาดในฝั่งของ External service ที่เราเรียกใช้&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decouple ให้สองระบบเรียกกับแบบ Asynchronous โดยเอา Request ที่ไม่สำเร็จของเราไปเก็บไว้ใน Queue แล้ว Retry ใหม่ในภายหลัง&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>