<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technical on Not About Code - Technical Leadership</title><link>https://www.notaboutcode.com/tags/technical/</link><description>Recent content in technical on Not About Code - Technical Leadership</description><generator>Hugo -- gohugo.io</generator><language>th</language><lastBuildDate>Sat, 26 Feb 2022 15:05:28 +0100</lastBuildDate><atom:link href="https://www.notaboutcode.com/tags/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>เขียนโค้ดให้เหมือนเต่า จะไปได้เร็วกว่ากระต่าย</title><link>https://www.notaboutcode.com/post/32-code-slowly-to-be-fast/</link><pubDate>Sat, 26 Feb 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/32-code-slowly-to-be-fast/</guid><description>สำหรับคนที่พึ่งเขียนโค้ดใหม่ๆ ผมแนะนำว่าให้พยายามเขียนโค้ดทีละนิด อย่าเขียนรวดเดียวครับ
ผมสังเกตว่าคนที่เขียนโค้ดได้ดี จะมีพฤติกรรมหลายอย่างคล้ายๆกัน หนึ่งในพฤติกรรมที่ผมเห็นบ่อย คือเค้าจะแก้โค้ดทีละนิด แล้วค่อยๆรันดูว่าทำงานถูกต้องตามที่คิดไว้ไหม พอทำถูกแล้ว ก็จะค่อยเติมโค้ดเข้าไปต่อ
แต่ละรอบ เค้าจะแก้โค้ดแค่ไม่เกินห้าบรรทัด
ตัวอย่างเช่น ผมอยากจะเขียน API เพื่อรับค่าจาก Array มาคำนวนแล้วส่งค่า Sum กลับไป ผมจะเขียนแต่ละรอบดังนี้
เขียน API เพื่อรับค่า Array แล้ว print ค่าที่รับไปออกมา แล้วเขียนโค้ดเพื่อเทสต์ดูว่าค่าถูกต้อง ชนิดของตัวแปรที่รับเข้ามาเป็นตัวเลข ก่อนจะไปต่อ ลอง return ค่า 0 กลับไปดู แล้วเรียก API อีกรอบ ดูว่าได้ค่าที่รีเทิร์นตรงไหม วนลูปแล้วลองพิมพ์ค่าใน Array ออกมาในว่าเราวนลูปถูกไหม คำนวนค่า Sum แล้ว return กลับ ลองเทสต์พวก Edge case ทีละตัว (เช่น Array ว่างเปล่า หรือมีค่าแค่ตัวเดียว) คนที่ใช้ TDD (Test Driven Development) จะคุ้นกับการทำงานในลักษณะนี้ ดูคร่าวๆเหมือนจะช้ากว่า แต่ในทางปฏิบัติ ผมรู้สึกว่ามันเร็วกว่าเพราะถ้าผมทำอะไรผิดนิดนึง ผมรู้เลยว่ามันต้องผิดใน 2-3 บรรทัดที่ผมพึ่งใส่เข้าไป จะหาบั๊กได้เร็วมาก</description></item><item><title>เถียงเรื่อง Technical Design กันไม่จบซักที ทำไงดี?</title><link>https://www.notaboutcode.com/post/29-technical-conflict-resolution/</link><pubDate>Thu, 11 Jun 2020 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/29-technical-conflict-resolution/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/fight-01.png" alt="Photo by rawpixel on Unsplash">&lt;/p>
&lt;p>เคยตกอยู่ในสถานการณ์ที่คนในห้องประชุมเถียงเรื่องเดียวกันติดต่อเป็นระยะเวลา 30 นาทีแล้วไม่ไปไหนไหมครับ?&lt;/p>
&lt;p>ส่วนใหญ่ที่ผมเจอ มักจะเป็นเรื่องของ Technical Design ว่าจะไปในทิศทางไหนดี ซึ่งเราก็รู้กันว่าการ Design มันเป็นเรื่องของการ Trade-off หลายๆครั้งมันยากมากที่จะตอบว่าแบบไหนดีกว่า&lt;/p>
&lt;p>การตัดสินใจเรื่องนี้ส่งผลกระทบในระยะยาว จึงต้องพิจารณาให้รอบคอบ แต่บางครั้ง เราก็จะเจอสถานการที่คนสองคน(หรือทีมแตกเป็นสองฝ่าย)เถียงกันไม่จบเสียที วนกลับมาประเด็นเดิมซ้ำๆ แย้งกันไปมา ไม่ไปไหน&lt;/p>
&lt;p>ยิ่งถ้าประชุมก่อนพักเที่ยง ผมจะหิวข้าว ไปกินข้าวสายนี่ไม่โอเคเลย เรื่องกินเรื่องใหญ่&lt;/p>
&lt;p>วันนี้ผมมีวิธีมานำเสนอ ไม่รับประกันว่าได้ผลตลอด แต่เท่าที่ใช้มานี่ได้ผลดีมาก ช่วยให้ผมไม่ต้องไปกินข้าวสายได้หลายครั้ง&lt;/p></description></item><item><title>วิธีการวัด Technical Skill ในการสัมภาษณ์งาน</title><link>https://www.notaboutcode.com/post/14-technical-interview/</link><pubDate>Sat, 09 Dec 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/14-technical-interview/</guid><description>&lt;p>ใน&lt;a href="https://www.notaboutcode.com/post/13-behavioral-interview/">บทความที่แล้ว&lt;/a> เราคุยกันในเรื่อง Soft skill ของผู้สมัครด้วย Behavioral Interview&lt;/p>
&lt;p>บทความนี้จะพูดถึงรูปแบบในการวัด Technical Skill กันบ้าง โดยผมจะยกตัวอย่างวิธีการวัด Technical Skill ต่างๆที่ผมเคยเจอมา ซึ่งแต่ละแบบก็จะมีข้อดีข้อเสียแตกต่างกัน&lt;/p>
&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/meeting-03.jpg" alt="Photo by Helloquence on Unsplash">&lt;/p></description></item></channel></rss>