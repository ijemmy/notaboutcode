<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scalability on Not About Code - Technical Leadership</title><link>https://ijemmy.github.io/notaboutcode/tags/scalability/</link><description>Recent content in scalability on Not About Code - Technical Leadership</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 02 Nov 2017 12:04:02 +0700</lastBuildDate><atom:link href="https://ijemmy.github.io/notaboutcode/tags/scalability/index.xml" rel="self" type="application/rss+xml"/><item><title>ปัญหาของ Sticky Session</title><link>https://ijemmy.github.io/notaboutcode/post/08-sticky-session/</link><pubDate>Thu, 02 Nov 2017 12:04:02 +0700</pubDate><guid>https://ijemmy.github.io/notaboutcode/post/08-sticky-session/</guid><description>&lt;p>&lt;img src="img/covers/traffic-01.jpg" alt="Photo by Denys Nevozhai, from Unsplash.com">&lt;/p>
&lt;p>ใครที่เคยใช้ Load Balancer (LB) คงจะเคยได้ยินคำว่า Sticky Session (หรือ Session Affinity) กันมาบ้าง&lt;/p>
&lt;p>แนวคิดของ Sticky Session คือการให้ LB ส่ง Request ที่มาจากผู้ใช้ (Client) คนเดียวยัง ไปยังเซอร์เวอร์ตัวเดียวกันตลอด&lt;/p>
&lt;p>ตัวอย่างเช่น เรามีเซอร์เวอร์ 3 ตัว ชื่อว่า S1, S2, และ S3 วางอยู่ข้างหลัง LB แล้วมีผู้ใช้ส่ง Request เข้ามายังเว็บเรา&lt;/p>
&lt;figure class="center" >
&lt;img src="https://ijemmy.github.io/notaboutcode/img/diagrams/loadbalancer.png"
alt="Load Balancer with 3 servers"
>
&lt;figcaption>
Load Balancer with 3 servers
&lt;/figcaption>
&lt;/figure>
&lt;p>ในครั้งแรก Request ถูกส่งไปให้ S1 แต่พอผู้ใช้ส่ง Request ถัดๆไป LB อาจส่ง Request นั้นไปยัง S2 หรือ S3 แทน&lt;/p>
&lt;p>แต่หากเราเปิด Sticky Session แล้วล่ะก็ ตัว LB จะส่ง Request จากผู้ใช้คนเดิมไปยัง S1 ตลอด โดยไม่ส่งไปที่ S2 หรือ S3 เลย&lt;/p>
&lt;p>ในบทความนี้ เราจะมาทำความเข้าใจว่า Sticky Session ให้ละเอียดยิ่งขึ้น และอธิบายถึงปัญหาที่มักจะเกิดขึ้นในการใช้ Sticky Session&lt;/p></description></item></channel></rss>