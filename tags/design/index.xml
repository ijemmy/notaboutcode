<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on Not About Code - Technical Leadership</title>
    <link>https://www.notaboutcode.com/tags/design/</link>
    <description>Recent content in design on Not About Code - Technical Leadership</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>th</language>
    <lastBuildDate>Thu, 11 Jun 2020 12:04:02 +0700</lastBuildDate><atom:link href="https://www.notaboutcode.com/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>เถียงเรื่อง Technical Design กันไม่จบซักที ทำไงดี?</title>
      <link>https://www.notaboutcode.com/post/29-technical-conflict-resolution/</link>
      <pubDate>Thu, 11 Jun 2020 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/29-technical-conflict-resolution/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/fight-01.png&#34; alt=&#34;Photo by rawpixel on Unsplash&#34;&gt;&lt;/p&gt;
&lt;p&gt;เคยตกอยู่ในสถานการณ์ที่คนในห้องประชุมเถียงเรื่องเดียวกันติดต่อเป็นระยะเวลา 30 นาทีแล้วไม่ไปไหนไหมครับ?&lt;/p&gt;
&lt;p&gt;ส่วนใหญ่ที่ผมเจอ มักจะเป็นเรื่องของ Technical Design ว่าจะไปในทิศทางไหนดี ซึ่งเราก็รู้กันว่าการ Design มันเป็นเรื่องของการ Trade-off หลายๆครั้งมันยากมากที่จะตอบว่าแบบไหนดีกว่า&lt;/p&gt;
&lt;p&gt;การตัดสินใจเรื่องนี้ส่งผลกระทบในระยะยาว จึงต้องพิจารณาให้รอบคอบ แต่บางครั้ง เราก็จะเจอสถานการที่คนสองคน(หรือทีมแตกเป็นสองฝ่าย)เถียงกันไม่จบเสียที วนกลับมาประเด็นเดิมซ้ำๆ แย้งกันไปมา ไม่ไปไหน&lt;/p&gt;
&lt;p&gt;ยิ่งถ้าประชุมก่อนพักเที่ยง ผมจะหิวข้าว ไปกินข้าวสายนี่ไม่โอเคเลย เรื่องกินเรื่องใหญ่&lt;/p&gt;
&lt;p&gt;วันนี้ผมมีวิธีมานำเสนอ ไม่รับประกันว่าได้ผลตลอด แต่เท่าที่ใช้มานี่ได้ผลดีมาก ช่วยให้ผมไม่ต้องไปกินข้าวสายได้หลายครั้ง&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>บริษัทสุธีการจำ, CAP Theorem, และ Eventual Consistency</title>
      <link>https://www.notaboutcode.com/post/17-cap-theorem/</link>
      <pubDate>Sun, 07 Jan 2018 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/17-cap-theorem/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/photo-01.jpg&#34; alt=&#34;Photo by Joanna Kosinska on Unsplash&#34;&gt;&lt;/p&gt;
&lt;p&gt;หัวข้อด้าน Distributed System เป็นอะไรที่สนุก แต่เข้าใจยากมาก&lt;/p&gt;
&lt;p&gt;หนึ่งในเรื่องที่ผมอ่านหลายรอบกว่าจะเก็ต ก็คือเรื่องของ CAP Theorem ซึ่งเป็นแนวคิดในการ Trade-off คุณสมบัติของ Distributed System ที่เราออกแบบ&lt;/p&gt;
&lt;p&gt;&amp;ldquo;CAP&amp;rdquo; เป็นตัวย่อจาก Consistency, Availability, Partition Tolerant  โดย Theorem นี้ได้กล่าวไว้ว่า คุณไม่มีทางที่่จะออกแบบระบบโดยมีคุณสมบัติ 3 ข้อนี้ พร้อมกัน อย่างเก่งก็ได้แค่ 2 ใน 3&lt;/p&gt;
&lt;p&gt;แต่ทำไมถึงเป็นอย่างนั้นล่ะ?&lt;/p&gt;
&lt;p&gt;วันนี้เราจะมาทำความเข้าใจกับเจ้า Theorem นี้กัน ผ่านการเรื่องราวของบริษัท &amp;ldquo;สุธีการจำ&amp;rdquo; !!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>การออกแบบ Service API ให้เป็น Idempotent</title>
      <link>https://www.notaboutcode.com/post/16-idempotent/</link>
      <pubDate>Tue, 26 Dec 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/16-idempotent/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/pay-01.jpg&#34; alt=&#34;Photo by William Iven on Unsplash&#34;&gt;&lt;/p&gt;
&lt;p&gt;ใครเคยเรียกใช้งานเซอร์วิซครั้งเดียว (เช่น การโอนเงิน สั่งซื้อของ ฯลฯ) แล้วเจอ Transaction ตัดซ้ำสองครั้งไหมครับ?&lt;/p&gt;
&lt;p&gt;ถ้าใช่ คุณเจอปัญหาเรื่อง Idempotent เข้าให้แล้วล่ะ&lt;/p&gt;
&lt;p&gt;เราเคยคุยกันในเรื่องของ&lt;a href=&#34;https://www.notaboutcode.com/post/05-retry/&#34;&gt;Retry&lt;/a&gt;ไปแล้ว ว่าอาจจะถล่มเซอร์วิซตัวเองได้ หากไม่จัดการให้ดี&lt;/p&gt;
&lt;p&gt;มานั่งตรึกตรองดูอีกที จริงๆแล้วผมลืมอีกคอนเซ็บหนึ่งที่สำคัญมากเวลาเราใช้ Retry นั่นก็คือเรื่อง Idempotent ซึ่งเป็นที่มาของ เคส Transaction เกิดขึ้นสองที&lt;/p&gt;
&lt;p&gt;บทความนี้จะเริ่มต้นจากต้นตอของปัญหานี้ก่อน เพื่ออธิบายให้เห็นภาพว่าเกิดอะไรขึ้น และเสนอวิธีการแก้ปัญหาในตอนท้ายครับ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>การออกแบบ Service API ให้ Backward-Compatible</title>
      <link>https://www.notaboutcode.com/post/15-service-api-versioning/</link>
      <pubDate>Fri, 15 Dec 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/15-service-api-versioning/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/lego-01.jpg&#34; alt=&#34;Photo by Iker Urteaga on Unsplash&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;APIs, like diamonds, are forever&amp;rdquo; &amp;ndash; Xebia Essentials&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;เรานิยมเลือกใช้เพชรในแหวนแต่งงาน เพื่อแสดงความเป็นนิรันดร์&lt;/p&gt;
&lt;p&gt;เวลาออกแบบ Service API ผมแนะนำให้ใส่ความโรแมนติกนี้ลงไปหน่อย ลองคิดว่านี่แหละคือแหวนแต่งงาน ระหว่างคุณและผู้ใช้เซอร์วิซของคุณ ที่จะอยู่ต่อไปตลอดจนชั่วเซอร์วิซสลาย&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ปกป้องระบบไม่ให้ล่มหมดด้วย Bulkhead</title>
      <link>https://www.notaboutcode.com/post/11-bulkhead/</link>
      <pubDate>Sun, 12 Nov 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/11-bulkhead/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/ship-01.jpg&#34; alt=&#34;Photo by Abraham Wiebe, from Unsplash.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bulkhead เป็นเทคนิคการออกแบบที่เหมาะกับ Critical System คือ ถ้าล่มปุ๊บ คนในองค์กรจะไม่สามารถทำงานต่อได้เลย&lt;/p&gt;
&lt;p&gt;ถ้าใครเปิดดิกดู ศัพท์นี้จริงๆใช้เรียกการออกแบบพาหนะครับ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bulkhead (n.) a dividing wall or barrier between separate compartments inside a ship, aircraft, or other vehicle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ไอเดียของ Bulkhead คือการออกแบบให้พาหนะแยกออกเป็นส่วนๆ (Compartmentalisation) หากมีส่วนใดส่วนหนึ่งมีปัญหา ผลกระทบจะต้องไม่รุนแรงจนทำให้ทั้งพาหนะล่มหมด&lt;/p&gt;
&lt;p&gt;ยกตัวอย่างเช่น สมมติว่าเรือของเรามีจุดรั่วจุดหนึ่ง หากเราไม่ได้มีการแบ่งโซนเป็นส่วน น้ำจะกระจายไปทั่วท้องเรือ เรือก็จะจมแน่นอน&lt;/p&gt;
&lt;p&gt;การใช้ Bulkhead คือการกั้นส่วนท้องเรือออกเป็นส่วนๆ หากน้ำรั่วขึ้นมา น้ำก็จะเข้ามาจนเต็มแค่ส่วนหนึ่งๆ โดยไม่หนักพอทำให้เรือล่มทั้งลำ (ถ้ายังนึกภาพไม่ออก ลองดู&lt;a href=&#34;https://www.google.nl/search?dcr=0&amp;amp;biw=1832&amp;amp;bih=989&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=bulkhead&amp;amp;oq=bulkhead&#34;&gt;ภาพในกูเกิ้ล&lt;/a&gt;ครับ)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ปกป้องเซอร์วิซจากผู้ใช้มักมากด้วย Throttling</title>
      <link>https://www.notaboutcode.com/post/10-throttle/</link>
      <pubDate>Thu, 09 Nov 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/10-throttle/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/limit-01.jpg&#34; alt=&#34;Photo by Ksenia Kudelkina, from Unsplash.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;ลองนึกภาพว่าเรามีระบบที่ถูกออกแบบเป็น Service-Oriented Architecture (SOA)&lt;/p&gt;
&lt;p&gt;ในบรรดาเซอร์วิซทั้งหมด จะมีบางเซอร์วิซทีเป็น Dependency ของเซอร์วิซอื่นๆ ผมจะเรียกเซอร์วิซนี้ว่าเซอร์วิซ A&lt;/p&gt;
&lt;p&gt;ถ้าเซอร์วิซ A พังขึ้นมา เซอร์วิซอื่นที่ต้องเรียกใช้ข้อมูลนี้ทั้งหมดก็จะทำงานไม่ได้&lt;/p&gt;
&lt;p&gt;ตัวอย่างเช่นในภาพข้างล่าง หากเซอร์วิซ A พัง  เซอร์วิซ B, และ C จะทำงานไม่ได้&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ปัญหาของ Sticky Session</title>
      <link>https://www.notaboutcode.com/post/08-sticky-session/</link>
      <pubDate>Thu, 02 Nov 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/08-sticky-session/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/traffic-01.jpg&#34; alt=&#34;Photo by Denys Nevozhai, from Unsplash.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;ใครที่เคยใช้ Load Balancer (LB) คงจะเคยได้ยินคำว่า Sticky Session (หรือ Session Affinity) กันมาบ้าง&lt;/p&gt;
&lt;p&gt;แนวคิดของ Sticky Session คือการให้ LB ส่ง Request ที่มาจากผู้ใช้ (Client) คนเดียวยัง ไปยังเซอร์เวอร์ตัวเดียวกันตลอด&lt;/p&gt;
&lt;p&gt;ตัวอย่างเช่น เรามีเซอร์เวอร์ 3 ตัว ชื่อว่า S1, S2, และ S3 วางอยู่ข้างหลัง LB  แล้วมีผู้ใช้ส่ง Request เข้ามายังเว็บเรา&lt;/p&gt;
&lt;figure class=&#34;center&#34; &gt;
  &lt;img  src=&#34;https://www.notaboutcode.com/img/diagrams/loadbalancer.png&#34;
        alt=&#34;Load Balancer with 3 servers&#34;
        &gt;
  &lt;figcaption&gt;
    Load Balancer with 3 servers
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ในครั้งแรก Request ถูกส่งไปให้ S1 แต่พอผู้ใช้ส่ง Request ถัดๆไป LB อาจส่ง Request นั้นไปยัง S2 หรือ S3 แทน&lt;/p&gt;
&lt;p&gt;แต่หากเราเปิด Sticky Session แล้วล่ะก็ ตัว LB จะส่ง Request จากผู้ใช้คนเดิมไปยัง S1 ตลอด โดยไม่ส่งไปที่ S2 หรือ S3 เลย&lt;/p&gt;
&lt;p&gt;ในบทความนี้ เราจะมาทำความเข้าใจว่า Sticky Session ให้ละเอียดยิ่งขึ้น และอธิบายถึงปัญหาที่มักจะเกิดขึ้นในการใช้ Sticky Session&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retry ยังไงให้ปลอดภัย</title>
      <link>https://www.notaboutcode.com/post/05-retry/</link>
      <pubDate>Sat, 14 Oct 2017 12:04:02 +0700</pubDate>
      
      <guid>https://www.notaboutcode.com/post/05-retry/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.notaboutcode.com/img/covers/spiral-stairs-01.jpg&#34; alt=&#34;Photo by Nick Morris, from Unsplash.com&#34;&gt;&lt;/p&gt;
&lt;p&gt;วันนี้นั่งคุยกับเพื่อนเรื่อง Retry รู้สึกว่าเป็นหัวข้อที่น่าสนใจดี&lt;/p&gt;
&lt;p&gt;โจทย์คือเรามี External service ที่ไม่ค่อยสเถียรเท่าไร เวลาส่ง Request ไป วันดีคืนดีก็อาจจะ:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;พังแบบส่งสาเหตุการพังกลับมาให้ เช่น 5xx พร้อม error code&lt;/li&gt;
&lt;li&gt;พังแบบไม่มีอะไรตอบกลับมา ซึ่งสาเหตุอาจจะมาจากที่ระบบนั้นเดี้ยงไประหว่างการทำงาน หรือเน็ตเวิร์คเน่า&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;กรณีนี้ เรามีหลายทางเลือก&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;เลือกที่จะจบการทำงาน แล้วแสดงผลให้ฝั่งผู้ใช้ของเรา (Client) รู้ว่าระบบมีปัญหา พร้อม Error code ซึ่งก็ถือว่ายอมรับได้ เพราะหากเราจำเป็นต้องการใช้ข้อมูลจาก External Service ยังไงก็ทำอะไรไม่ได้&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ทำการ Retry คือการส่ง Request ซ้ำโดยอัตโนมัติ หากเกิดข้อผิดพลาดในฝั่งของ External service ที่เราเรียกใช้&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decouple ให้สองระบบเรียกกับแบบ Asynchronous โดยเอา Request ที่ไม่สำเร็จของเราไปเก็บไว้ใน Queue แล้ว Retry ใหม่ในภายหลัง&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
