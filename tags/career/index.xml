<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>career on Not About Code - Technical Leadership</title><link>https://www.notaboutcode.com/tags/career/</link><description>Recent content in career on Not About Code - Technical Leadership</description><generator>Hugo -- gohugo.io</generator><language>th</language><lastBuildDate>Fri, 11 Mar 2022 15:05:28 +0100</lastBuildDate><atom:link href="https://www.notaboutcode.com/tags/career/index.xml" rel="self" type="application/rss+xml"/><item><title>Technical decision on ambiguity/ ตัดสินใจบนความกำกวม</title><link>https://www.notaboutcode.com/post/36-tech-decision-on-ambiguity/</link><pubDate>Fri, 11 Mar 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/36-tech-decision-on-ambiguity/</guid><description>เมื่อวานก่อนบังเอิญเจอเพื่อนร่วมงานเก่าที่ไม่ได้เจอกันสองปีกว่า เค้าบอกว่าพรุ่งนี้จะบินไปทำงานที่ ​US แล้ว . ผมก็ถามต่อว่างานมีรายละเอียดยังไง ต้องทำอะไรต่างจากเดิมไหม เค้าก็บอกว่าไม่เลย ทำระบบเดิม ขอบเขตงานเหมือนเดิม เพียงแต่ที่ฝั่ง US มีจ้างโปรแกรมเมอร์เพิ่ม แต่เป็นเด็กใหม่หมด พึ่งจบจากมหาวิทยาลัย ทีมเลยอยากให้มีโปรแกรมเมอร์ที่อาวุโสหน่อยไปช่วยสอน ซึ่งเค้าก็ชอบสอนคนอื่นอยู่แล้ว (และสอนได้ดีด้วย คนนี้ใจเย็น อารมณ์ดี) . แสดงความยินดี คุยกันจบ ทำให้ผมกลับมาคิด . อย่างแรกเลยคือปริมาณโปรแกรมเมอร์จบใหม่ทั่วโลก และที่เปลี่ยนสายมากำลังเพิ่มขึ้นมาก เพราะเงินเดือนที่ดีขึ้น คุณภาพงานที่ดีกว่า (ทำ remote หรือ Work From Home ได้) . แต่ปริมาณความต้องการก็เพิ่มขึ้นไม่แพ้กัน . โดยเฉพาะอย่างยิ่งโปรแกรมเมอร์ที่ประสบการณ์ระดับ 10 ปีขึ้น เคยทำและออกแบบระบบใหญ่ๆ สามารถคุมโปรเจ็ค สอนโปรแกรมเมอร์ใหม่ๆ จำนวนยังมีอยู่จำกัด บริษัทใน US แย่งซื้อตัวกันเยอะมาก ทำให้ขาดแคลน บริษัทถึงเริ่มดึงคนจากต่างประเทศไปในช่วงหลายปีที่ผ่านมา . ประเด็นต่อมาคือหนังสือที่ผมเคยอ่านสรุป ชื่อว่า What Got You Here Won&amp;rsquo;t Get You There . หนังสือเรื่องนี้เล่าถึงผู้จัดการที่ติดอยู่ในระดับ Early/Middle management แต่ไปต่อไม่ได้ สาเหตุนึงเพราะเค้าเชื่อมั่นในพฤติกรรมหลายๆอย่างของเค้า ที่ทำให้เค้าได้รับการโปรโมทมาอยู่ในตำแหน่งนี้ และยังยึดอยู่กับพฤติกรรมนั้นโดยไม่เปลี่ยน .</description></item><item><title>What Got You Here Won't Get You There / อย่าคิดว่าทำแบบเดิมแล้วจะสำเร็จไปตลอด</title><link>https://www.notaboutcode.com/post/35-what-got-you-here/</link><pubDate>Sun, 06 Mar 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/35-what-got-you-here/</guid><description>เมื่อวานก่อนบังเอิญเจอเพื่อนร่วมงานเก่าที่ไม่ได้เจอกันสองปีกว่า เค้าบอกว่าพรุ่งนี้จะบินไปทำงานที่ ​US แล้ว . ผมก็ถามต่อว่างานมีรายละเอียดยังไง ต้องทำอะไรต่างจากเดิมไหม เค้าก็บอกว่าไม่เลย ทำระบบเดิม ขอบเขตงานเหมือนเดิม เพียงแต่ที่ฝั่ง US มีจ้างโปรแกรมเมอร์เพิ่ม แต่เป็นเด็กใหม่หมด พึ่งจบจากมหาวิทยาลัย ทีมเลยอยากให้มีโปรแกรมเมอร์ที่อาวุโสหน่อยไปช่วยสอน ซึ่งเค้าก็ชอบสอนคนอื่นอยู่แล้ว (และสอนได้ดีด้วย คนนี้ใจเย็น อารมณ์ดี) . แสดงความยินดี คุยกันจบ ทำให้ผมกลับมาคิด . อย่างแรกเลยคือปริมาณโปรแกรมเมอร์จบใหม่ทั่วโลก และที่เปลี่ยนสายมากำลังเพิ่มขึ้นมาก เพราะเงินเดือนที่ดีขึ้น คุณภาพงานที่ดีกว่า (ทำ remote หรือ Work From Home ได้) . แต่ปริมาณความต้องการก็เพิ่มขึ้นไม่แพ้กัน . โดยเฉพาะอย่างยิ่งโปรแกรมเมอร์ที่ประสบการณ์ระดับ 10 ปีขึ้น เคยทำและออกแบบระบบใหญ่ๆ สามารถคุมโปรเจ็ค สอนโปรแกรมเมอร์ใหม่ๆ จำนวนยังมีอยู่จำกัด บริษัทใน US แย่งซื้อตัวกันเยอะมาก ทำให้ขาดแคลน บริษัทถึงเริ่มดึงคนจากต่างประเทศไปในช่วงหลายปีที่ผ่านมา . ประเด็นต่อมาคือหนังสือที่ผมเคยอ่านสรุป ชื่อว่า What Got You Here Won&amp;rsquo;t Get You There . หนังสือเรื่องนี้เล่าถึงผู้จัดการที่ติดอยู่ในระดับ Early/Middle management แต่ไปต่อไม่ได้ สาเหตุนึงเพราะเค้าเชื่อมั่นในพฤติกรรมหลายๆอย่างของเค้า ที่ทำให้เค้าได้รับการโปรโมทมาอยู่ในตำแหน่งนี้ และยังยึดอยู่กับพฤติกรรมนั้นโดยไม่เปลี่ยน .</description></item><item><title>จาก Definition of Done สู่ Definition of Success</title><link>https://www.notaboutcode.com/post/34-definition-of-success/</link><pubDate>Thu, 03 Mar 2022 15:05:28 +0100</pubDate><guid>https://www.notaboutcode.com/post/34-definition-of-success/</guid><description>วันนี้คุยกับเมนเตอร์เรื่องทำอย่างไรเราถึงจะสร้าง Impact จากงานที่เราทำได้ ทำยังไงให้เราก้าวจาก Senior เป็นระดับ Staff หรือ Principal
คุยไปคุยมาได้ไอเดียที่จริงๆแล้วใกล้ตัวมาก แต่ไม่เคยคิดให้ลึกซึ้งมาก่อน เลยมาเล่าให้ฟังครับ
เรามักจะได้ยินคำว่า Definition of Done (DoD) กันบ่อยในโลกของอไจล์ หลักๆเลยก็มักจะระบุว่างานจะเสร็จต้องมีเทสต์ครบ ต้องพร้อมขึ้นโปรดักชั่น (Releasable) ฯลฯ
สำหรับโปรแกรมเมอร์ทั่วไป พองานผ่าน DoD แล้วก็ถือว่าจบ ไปนั่งทำ Ticket/Feature/Issue ใหม่ๆต่อได้
แต่เมนเตอร์เค้าให้คิดต่อว่า จริงๆแล้วทำจบ DoD มันยังไม่เกิด Impact อะไรเลย โดยเฉพาะงานที่ใหญ่ๆ อย่างเช่น Feature หรือ Product ใหม่ๆ การที่จะทำให้งานเรามีความหมาย (หรือ Impact) มันจะต้องไปไกลเกิน DoD ซึ่งเป็นที่มาของไอเดียของ Definition of Success
ยกตัวอย่างเช่น ถ้าเป็น Feature เราก็ต้องดูต่อด้วยมีคนใช้งานจริงรึเปล่า ส่งผลต่อยอดขายเพิ่มขึ้นไหม มี Feedback ที่เป็นบวกจากลูกค้าหรือเปล่า
พวกนี้เป็นอะไรที่เราต้องคิดและมี Definition ที่ชัดเจน เพราะมันมักจะค่อนข้างวัดยาก (เช่น เราจะรู้ได้ไงว่ายอดขายที่เพิ่มขึ้นปีนี้มาจากฟีเจอร์ใหม่ ไม่ใช่แค่เพราะเผอิญคนซื้อของเยอะขึ้น)
พอมองที่ภาพใหญ่ขึ้น จะทำให้เห็นว่า Impact ของงานเราไม่ได้มีแค่เขียนโปรแกรมให้เสร็จ บางครั้ง เราก็ต้องสวมหมวกหน้าที่อื่นนอกเหนือจากการเป็นโปรแกรมเมอร์ด้วย หรือบางที เราก็ต้องต่อยอดไปคุยกับทีมอื่นๆด้วย เช่น Marketing, Business เพื่อให้ผลงานของเรามี Impact จริงๆ</description></item><item><title>โปรแกรมเมอร์มือใหม่ เรียนรู้อะไรดี (ภาค 2)</title><link>https://www.notaboutcode.com/post/07-career-start-non-technical/</link><pubDate>Tue, 31 Oct 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/07-career-start-non-technical/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/career-02.jpg" alt="Photo by Olu Eletu, from Unsplash.com">&lt;/p>
&lt;p>ใน&lt;a href="https://www.notaboutcode.com/post/06-career-start/">ภาคแรก&lt;/a>เราคุยกันในเรื่องของ Technical Skills ทีเป็นพื้นฐานไว้ใช้ในระยะยาว&lt;/p>
&lt;p>สำหรับภาคนี้ เราจะมาโฟกัสในส่วนของ Non-technical กันบ้าง ซึ่งเป็นครอบคลุมค่อนข้างหลากหลายเรื่อง โดยผมคัดเฉพาะหัวข้อที่ผมคิดว่าสำคัญๆ เพื่อไม่ให้ยาวเกินไป&lt;/p>
&lt;p>บทความนี้มีความคิดเห็นส่วนตัวเยอะมาก ผมเลยแยกออกมาจากภาคแรก&lt;/p>
&lt;p>ใครที่มีความเห็นแตกต่าง หรืออ่านแล้วรู้สึกจี้ด ไม่เห็นด้วยมากๆ ลองมาแลกเปลี่ยนความเห็นกันใน&lt;a href="https://www.facebook.com/notaboutcode/">เฟสบุ้คเพจ&lt;/a>ได้ครับ เผื่อบทความนี้อาจจะมีภาค3 ผมเองก็อยากเก็บรายละเอียด ให้ได้มากที่สุด เพราะบล็อคนี้ตั้งใจจะเขียนทิ้งไว้นาน&lt;/p>
&lt;p>สำหรับโปรแกรมเมอร์มือใหม่ที่ยังไม่มีความคิดเห็น อ่านแล้วก็ฟังหูไว้หู ใช้เป็นแนวทางแต่อย่ายึดมั่นกับมันมาก ยังมีคนที่เก่งกว่าผมอีกมากที่ใช้แนวทางอื่นในการพัฒนาตนเอง&lt;/p></description></item><item><title>โปรแกรมเมอร์มือใหม่ เรียนรู้อะไรดี ภาค 1</title><link>https://www.notaboutcode.com/post/06-career-start/</link><pubDate>Thu, 19 Oct 2017 12:04:02 +0700</pubDate><guid>https://www.notaboutcode.com/post/06-career-start/</guid><description>&lt;p>&lt;img src="https://www.notaboutcode.com/img/covers/career-01.jpg" alt="Photo by Jake Hills, from Unsplash.com">&lt;/p>
&lt;p>ความยากลำบากของโปรแกรมเมอร์สมัยนี้คือมีเรื่องที่ต้องเรียนรู้เยอะมาก&amp;hellip;&lt;/p>
&lt;p>มากจนไม่รู้ว่าจะเริ่มต้นที่ไหนดี&lt;/p>
&lt;p>บทความนี้รวมสิ่งที่ผมคิดว่าสำหรับโปรแกรมเมอร์มือใหม่ ควรจะเรียนรู้เอาไว้ ไม่ว่าจะเป็นสาย Frontend, Backend, หรือ Fullstack เรื่องพวกนี้ได้ใช้แน่ๆ และได้ใช้นานด้วย&lt;/p>
&lt;p>ผมเชื่อว่าความรู้พวกนี้ ในอีก 20 ปีข้างหน้า โปรแกรมเมอร์ยุคนั้นก็ยังต้องรู้กัน (ถ้าไม่โดน AI แย่งงานไปก่อน)&lt;/p>
&lt;p>แทนที่จะเอาเวลาไปเรียนรู้พวกเฟรมเวิร์ค ภาษา หรือไลบรารี่ที่เปลี่ยนใหม่ทุกๆ 3-5 ปี เรียนรู้พวกนี้ดีกว่าครับ เรียนรอบเดียว ใช้ยาว&lt;/p>
&lt;p>มาดูกันครับว่ามีอะไรบ้าง&lt;/p></description></item></channel></rss>